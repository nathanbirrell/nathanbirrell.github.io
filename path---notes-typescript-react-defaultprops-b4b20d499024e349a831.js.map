{"version":3,"sources":["webpack:///path---notes-typescript-react-defaultprops-b4b20d499024e349a831.js","webpack:///./.cache/json/notes-typescript-react-defaultprops.json"],"names":["webpackJsonp","400","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","hide","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAAC,OAAA,mBAAoDC,gBAAmBC,GAAA,gIAAAC,KAAA,40KAA0+KC,aAAyKL,MAAA,4DAAAM,KAAA,eAAAC,KAAA,QAAwGC,aAAgBC,KAAA,wCAAAC,UAA2DC,QAAUF,KAAA,sCAA4CJ,aAAgBL,MAAA,+EAAsFY,KAAA","file":"path---notes-typescript-react-defaultprops-b4b20d499024e349a831.js","sourcesContent":["webpackJsonp([270382057487454],{\n\n/***/ 400:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Nathan Birrell\",\"author\":\"Nathan Birrell\"}},\"markdownRemark\":{\"id\":\"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/typescript-react-defaultprops.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Getting React’s defaultProps to play nicely with Typescript’s <a href=\\\"https://www.tsmean.com/articles/learn-typescript/strict-null-checks-best-practice/\\\">strictNullChecks</a> can be a bit of a pain. Errors like this will pop up: <code class=\\\"language-text\\\">error TS2322: Type &#39;string | undefined&#39; is not assignable to type &#39;string&#39;</code>, because your Prop interface has an optional property on it. Even though at runtime you know the optional prop on your component will exist.</p>\\n<p><em>NOTE: This issue is <a href=\\\"https://github.com/Microsoft/TypeScript/issues/23812\\\">currently being worked on</a> by Typescript, so hopefully this workaround isn’t required for too long.</em></p>\\n<h2>Hack</h2>\\n<p>The quickest (hacky) way to avoid this error is to use the TS not-null operator (<code class=\\\"language-text\\\">!</code>). For example: <code class=\\\"language-text\\\">this.props.myOptionalProp!</code>.</p>\\n<h2>Better</h2>\\n<p>A better solution, however, to avoid abusing the not-null operator, but still retain good typechecking would be:</p>\\n<ol>\\n<li>define the <code class=\\\"language-text\\\">Prop</code> interface as normal, with the optional properties</li>\\n<li>define a new interface for <code class=\\\"language-text\\\">DefaultProps</code>, where each property is required</li>\\n<li>create a new type <code class=\\\"language-text\\\">PropsWithDefaults</code> (using <a href=\\\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\\\">intersection types</a>) consisting of <code class=\\\"language-text\\\">Props</code> and <code class=\\\"language-text\\\">DefaultProps</code></li>\\n<li>assign your component <code class=\\\"language-text\\\">defaultProps</code> as normal</li>\\n<li>when destructuring your props in <code class=\\\"language-text\\\">render</code>, use <a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\\\">type assertion</a> on <code class=\\\"language-text\\\">this.props</code> to the new <code class=\\\"language-text\\\">PropsWithDefaults</code></li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  requiredProp<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n  optionalProp<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">DefaultProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  optionalProp<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Intersection type of both Props interface and DefaultProps</span>\\ntype PropsWithDefaults <span class=\\\"token operator\\\">=</span> Props <span class=\\\"token operator\\\">&amp;</span> DefaultProps<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> defaultProps<span class=\\\"token punctuation\\\">:</span> DefaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Setting defaultProps as normal</span>\\n    optionalProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'None'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Asserting type PropsWithDefaults to `this.props`</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> requiredProp<span class=\\\"token punctuation\\\">,</span> optionalProp <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props <span class=\\\"token keyword\\\">as</span> PropsWithDefaults<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>requiredProp<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span>optionalProp<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11640#issuecomment-295155472\\\">Source</a></p>\",\"frontmatter\":{\"title\":\"Use React's defaultProps with Typescript strictNullChecks\",\"date\":\"May 18, 2018\",\"hide\":null}}},\"pathContext\":{\"slug\":\"/notes/typescript-react-defaultprops/\",\"previous\":{\"fields\":{\"slug\":\"/notes/typescript-accept-any-prop/\"},\"frontmatter\":{\"title\":\"Accept any property in a Typescript interface (for use on component props)\"}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---notes-typescript-react-defaultprops-b4b20d499024e349a831.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Nathan Birrell\",\"author\":\"Nathan Birrell\"}},\"markdownRemark\":{\"id\":\"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/typescript-react-defaultprops.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Getting React’s defaultProps to play nicely with Typescript’s <a href=\\\"https://www.tsmean.com/articles/learn-typescript/strict-null-checks-best-practice/\\\">strictNullChecks</a> can be a bit of a pain. Errors like this will pop up: <code class=\\\"language-text\\\">error TS2322: Type &#39;string | undefined&#39; is not assignable to type &#39;string&#39;</code>, because your Prop interface has an optional property on it. Even though at runtime you know the optional prop on your component will exist.</p>\\n<p><em>NOTE: This issue is <a href=\\\"https://github.com/Microsoft/TypeScript/issues/23812\\\">currently being worked on</a> by Typescript, so hopefully this workaround isn’t required for too long.</em></p>\\n<h2>Hack</h2>\\n<p>The quickest (hacky) way to avoid this error is to use the TS not-null operator (<code class=\\\"language-text\\\">!</code>). For example: <code class=\\\"language-text\\\">this.props.myOptionalProp!</code>.</p>\\n<h2>Better</h2>\\n<p>A better solution, however, to avoid abusing the not-null operator, but still retain good typechecking would be:</p>\\n<ol>\\n<li>define the <code class=\\\"language-text\\\">Prop</code> interface as normal, with the optional properties</li>\\n<li>define a new interface for <code class=\\\"language-text\\\">DefaultProps</code>, where each property is required</li>\\n<li>create a new type <code class=\\\"language-text\\\">PropsWithDefaults</code> (using <a href=\\\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types\\\">intersection types</a>) consisting of <code class=\\\"language-text\\\">Props</code> and <code class=\\\"language-text\\\">DefaultProps</code></li>\\n<li>assign your component <code class=\\\"language-text\\\">defaultProps</code> as normal</li>\\n<li>when destructuring your props in <code class=\\\"language-text\\\">render</code>, use <a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\\\">type assertion</a> on <code class=\\\"language-text\\\">this.props</code> to the new <code class=\\\"language-text\\\">PropsWithDefaults</code></li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  requiredProp<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n  optionalProp<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">DefaultProps</span> <span class=\\\"token punctuation\\\">{</span>\\n  optionalProp<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Intersection type of both Props interface and DefaultProps</span>\\ntype PropsWithDefaults <span class=\\\"token operator\\\">=</span> Props <span class=\\\"token operator\\\">&amp;</span> DefaultProps<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> defaultProps<span class=\\\"token punctuation\\\">:</span> DefaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Setting defaultProps as normal</span>\\n    optionalProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'None'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Asserting type PropsWithDefaults to `this.props`</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> requiredProp<span class=\\\"token punctuation\\\">,</span> optionalProp <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props <span class=\\\"token keyword\\\">as</span> PropsWithDefaults<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>requiredProp<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span>optionalProp<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><a href=\\\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11640#issuecomment-295155472\\\">Source</a></p>\",\"frontmatter\":{\"title\":\"Use React's defaultProps with Typescript strictNullChecks\",\"date\":\"May 18, 2018\",\"hide\":null}}},\"pathContext\":{\"slug\":\"/notes/typescript-react-defaultprops/\",\"previous\":{\"fields\":{\"slug\":\"/notes/typescript-accept-any-prop/\"},\"frontmatter\":{\"title\":\"Accept any property in a Typescript interface (for use on component props)\"}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/notes-typescript-react-defaultprops.json\n// module id = 400\n// module chunks = 270382057487454"],"sourceRoot":""}