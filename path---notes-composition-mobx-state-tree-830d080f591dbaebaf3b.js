webpackJsonp([5370869238031],{398:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Nathan Birrell",author:"Nathan Birrell"}},markdownRemark:{id:"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/composition-mobx-state-tree.md absPath of file >>> MarkdownRemark",html:'<p>One part of building state management in mobx-state-tree that isn’t immediately obvious when starting, is composition. Usually you come across this issue when you want to share logic between multiple stores.</p>\n<p>While mobx-state-tree (MST) doesn’t quite provide inheritance (in the way of <code class="language-text">extends</code>), it does provide a little <code class="language-text">compose</code> method that can be used for similar means. In effect, it <a href="https://github.com/mobxjs/mobx-state-tree#simulate-inheritance-by-using-type-composition">simulates inheritance</a> by composing two models together.</p>\n<h2>Usage</h2>\n<p>Composing two stores is as simple as:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> AppleStore <span class="token operator">=</span> types\n  <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>\n    FruitStore<span class="token punctuation">,</span>\n    AppleModel<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">\'AppleStore\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h3>Example: compose a reusable base API store</h3>\n<p>Consider an application with many calls to different resources on an API, one that fetches Products and Posts. Rather that having duplicate code that handles loading/error/success logic and views between Products and Posts, we could compose them with an ApiStore.</p>\n<p><code class="language-text">stores/ApiStore.ts</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Shared model attributes between Products and Posts</span>\n<span class="token keyword">const</span> Model <span class="token operator">=</span> <span class="token punctuation">{</span>\n  isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  hasFetched<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  error<span class="token punctuation">:</span> types<span class="token punctuation">.</span><span class="token function">maybe</span><span class="token punctuation">(</span>ApiError<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Views</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token keyword">get</span> <span class="token function">hasError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>self<span class="token punctuation">.</span>error\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ... and other shared views here, for example, hasData() might check if there are items in a self.data array</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Actions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Note: the flow() and generator function is MST\'s way of handling asynchronous actions</span>\n  fetch<span class="token punctuation">:</span> <span class="token function">flow</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>endpoint<span class="token punctuation">:</span> string<span class="token punctuation">,</span> parameters<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Note: for the sake of example, YourTransportLayer constructs a URL and performs a window.fetch()</span>\n      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">yield</span> YourTransportLayer<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span>\n\n      self<span class="token punctuation">.</span><span class="token function">onFetchSuccess</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">// callback to be overriden in composed model</span>\n\n      self<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span>error <span class="token operator">=</span> error\n\n      self<span class="token punctuation">.</span><span class="token function">onFetchError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment">// callback to be overriden in composed model</span>\n\n      <span class="token comment">// ... any logging, etc.</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token boolean">false</span>\n      self<span class="token punctuation">.</span>hasFetched <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// If you like, you could create the callbacks `onFetchSuccess` and `onFetchError` with a simple error log to remind you to define these in your Products and Posts models</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> ApiStore <span class="token operator">=</span> types\n  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">\'ApiStore\'</span><span class="token punctuation">,</span> Model<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">views</span><span class="token punctuation">(</span>Views<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">actions</span><span class="token punctuation">(</span>Actions<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ApiStore</code></pre>\n      </div>\n<p>Now that you have your base API store, you can compose it with the stores that need it.</p>\n<p><code class="language-text">stores/ProductStore.ts</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Product <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">\'Product\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> types<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  category<span class="token punctuation">:</span> types<span class="token punctuation">.</span>number<span class="token punctuation">,</span>\n  onSale<span class="token punctuation">:</span> types<span class="token punctuation">.</span>boolean<span class="token punctuation">,</span>\n  price<span class="token punctuation">:</span> types<span class="token punctuation">.</span>number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Define things that are Product-store-specific</span>\n<span class="token keyword">const</span> Model <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> types<span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Views</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  recent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// sort by recent products</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  onSale<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// get products on sale</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Actions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  getProducts<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// run the ApiStore fetch method</span>\n    self<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/products\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// these are the callbacks that ApiStore runs</span>\n  onFetchSuccess<span class="token punctuation">:</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>products\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  onFetchError<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// the Product-only part of the store</span>\n<span class="token keyword">const</span> Products <span class="token operator">=</span> types\n  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">\'Products\'</span><span class="token punctuation">,</span> Model<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">views</span><span class="token punctuation">(</span>Views<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">actions</span><span class="token punctuation">(</span>Actions<span class="token punctuation">)</span>\n\n<span class="token comment">// Finally, compose the ApiStore with the Proucts store</span>\n<span class="token keyword">const</span> ProductStore <span class="token operator">=</span> types\n  <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>\n    ApiStore<span class="token punctuation">,</span>\n    Products<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string">\'ProductStore\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ProductStore</code></pre>\n      </div>\n<h2>Considerations</h2>\n<p>A few tradeoffs that come with using <code class="language-text">.compose</code> include:</p>\n<ul>\n<li>Readability: it’s not quite obvious that <code class="language-text">ProductStore</code> is composed with <code class="language-text">ApiStore</code>, until the very end of the file. This can impact readability in a way you wouldn’t get if we were working with ES6 classes.</li>\n<li>Typing issues: <code class="language-text">ProductStore</code> doesn’t exactly know that <code class="language-text">ApiStore</code> methods are in scope, until it’s composed, so typing on <code class="language-text">self</code> can be tricky. This is an <a href="https://github.com/mobxjs/mobx-state-tree#typing-self-in-actions-and-views">existing consideration</a> with MST, composition aside.</li>\n<li>Potentially easy to forget to create those callbacks (like <code class="language-text">onFetchSuccess</code>).</li>\n<li>This isn’t <em>inheritance</em>, unfortunately.</li>\n</ul>\n<p>Overall, this pattern should help keep your MST stores DRY, quicker to write and less error-prone.</p>',frontmatter:{title:"Composition in mobx-state-tree",date:"August 14, 2018",hide:null}}},pathContext:{slug:"/notes/composition-mobx-state-tree/",previous:{fields:{slug:"/notes/reusable-composable-react-components/"},frontmatter:{title:"Building a reusable, customisable and composable React components"}},next:null}}}});
//# sourceMappingURL=path---notes-composition-mobx-state-tree-830d080f591dbaebaf3b.js.map