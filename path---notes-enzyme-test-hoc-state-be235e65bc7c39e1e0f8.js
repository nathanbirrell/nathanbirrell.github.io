webpackJsonp([0x6d13da11a0f4],{399:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Nathan Birrell",author:"Nathan Birrell"}},markdownRemark:{id:"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/enzyme-test-hoc-state.md absPath of file >>> MarkdownRemark",html:'<p>When testing your store-connected containers (be those in Mobx or Redux or any state management library) you may have noticed you can’t access that component’s internal state or instance methods. This is because they’re wrapped as <a href="https://reactjs.org/docs/higher-order-components.html">higher-order components</a> (HOC).</p>\n<p>Of course, in order to test thoroughly, we often need access to the internal state.</p>\n<h2>Library-agnostic solution</h2>\n<p>Define your React component separately from the HOC one, export the HOC as default (for use in your app) and use a named export for the component (for your tests). Then Enzyme provides a <a href="http://airbnb.io/enzyme/docs/api/ReactWrapper/instance.html"><code class="language-text">instance()</code></a> method to get the mounted instance’s state (for example: <code class="language-text">wrapper.instance().state</code>)</p>\n<p>It’s probably a good idea to use a naming convention to split them up, maybe something like a <code class="language-text">Hoc</code> suffix, ie: <code class="language-text">AccountContainerHoc</code>.</p>\n<p>A Mobx with decorators example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AccountContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Account stuff...</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">\'store\'</span><span class="token punctuation">)</span>\n@observer\n<span class="token keyword">class</span> <span class="token class-name">AccountContainerHoc</span> <span class="token keyword">extends</span> <span class="token class-name">AccountContainer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> defualt AccountContainerHoc</code></pre>\n      </div>\n<p>Then in your test somewhere, access state like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> AccountContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'.\'</span>\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>AccountContainer <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>Mobx alternative</h2>\n<p>If rewriting your store container definitions is too painful, a quick helper for Mobx users is: <code class="language-text">AccountContainer.instance().wrappedInstance</code>. This should give you access to the internals.</p>\n<h2>Redux alternative</h2>\n<p>It <a href="https://github.com/airbnb/enzyme/issues/1002#issuecomment-310796612">appears</a> when shallow-rendering (preferable when testing these components anyway) you can use the <a href="http://airbnb.io/enzyme/docs/api/ShallowWrapper/dive.html"><code class="language-text">.dive()</code></a> method, although I haven’t tested this.</p>\n<p>Usually it’s easier to follow the pattern mentioned above anyway with Redux (and no decorators), because you can export your react component like above, and simply <code class="language-text">export default</code> your <code class="language-text">connect</code>ed container.</p>',frontmatter:{title:"Test internal state of higher-order components with Enzyme",date:"May 04, 2018",hide:null}}},pathContext:{slug:"/notes/enzyme-test-hoc-state/",previous:{fields:{slug:"/notes/enzyme-window-events/"},frontmatter:{title:"Test window-bound events on React components using Enzyme/Jest"}},next:{fields:{slug:"/notes/typescript-accept-any-prop/"},frontmatter:{title:"Accept any property in a Typescript interface (for use on component props)"}}}}}});
//# sourceMappingURL=path---notes-enzyme-test-hoc-state-be235e65bc7c39e1e0f8.js.map