webpackJsonp([0x86ca5f4b31b6],{402:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Nathan Birrell",author:"Nathan Birrell"}},markdownRemark:{id:"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/typescript-accept-any-prop.md absPath of file >>> MarkdownRemark",html:'<p>Sometimes we have core React componentry that passes all props given to it, down to a base DOM UI element. For example, a button element, whilst it may accept a few <em>known</em> props (ie: variations on a button, <code class="language-text">type={&#39;primary&#39;}</code>) it probably also passes any other <em>unknown</em> props down to the base UI element (ie: <code class="language-text">aria-label</code>).</p>\n<p>To achieve this in Typescript, we can add an <a href="https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#strict-object-literal-assignment-checking">indexer</a> to our interface. This is simply a property on the interface that accepts any given property from an object literal. It is still good practice to specify known properties in the interface, <em>especially ones used inside the component itself</em>, not just the props that get spread to the underlying element.</p>\n<h2>Example on a React component with object destructuring</h2>\n<p>Combine the indexer with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring">object destructuring</a> and the <a href="https://github.com/tc39/proposal-object-rest-spread">rest/spread operator</a>, the result is a fairly elegant solution. Take our simple Button component for example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n  onClick<span class="token punctuation">:</span> Function\n  type<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  <span class="token comment">// \'Indexer\'</span>\n  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span><span class="token operator">&lt;</span>IProps<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      onClick<span class="token punctuation">,</span>\n      type<span class="token punctuation">,</span>\n      <span class="token operator">...</span>otherProps <span class="token comment">// Assume any other props are for the base element</span>\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n\n    <span class="token comment">// do stuff with the type...</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>button\n        onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span>\n        <span class="token punctuation">{</span><span class="token operator">...</span>otherProps<span class="token punctuation">}</span> <span class="token comment">// Spread those otherProps</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is a reasonable approach to avoid Typescript complaining about type mismatches for unknown props, while still getting the autocomplete and all on the <em>known</em> props for a component.</p>',frontmatter:{title:"Accept any property in a Typescript interface (for use on component props)",date:"May 09, 2018",hide:null}}},pathContext:{slug:"/notes/typescript-accept-any-prop/",previous:{fields:{slug:"/notes/enzyme-test-hoc-state/"},frontmatter:{title:"Test internal state of higher-order components with Enzyme"}},next:{fields:{slug:"/notes/typescript-react-defaultprops/"},frontmatter:{title:"Use React's defaultProps with Typescript strictNullChecks"}}}}}});
//# sourceMappingURL=path---notes-typescript-accept-any-prop-13588a1b7bf3facc0627.js.map