{"version":3,"sources":["webpack:///path---notes-reusable-composable-react-components-3c54471de4974bf35bb1.js","webpack:///./.cache/json/notes-reusable-composable-react-components.json"],"names":["webpackJsonp","401","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","hide","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,iBAAAC,OAAA,mBAAoDC,gBAAmBC,GAAA,uIAAAC,KAAA,ky1BAA+z3BC,aAA0EL,MAAA,oEAAAM,KAAA,gBAAAC,MAAA,KAAiHC,aAAgBC,KAAA,+CAAAC,UAAkEC,QAAUF,KAAA,yCAA+CJ,aAAgBL,MAAA,8DAAqEY,MAASD,QAAUF,KAAA,uCAA6CJ,aAAgBL,MAAA","file":"path---notes-reusable-composable-react-components-3c54471de4974bf35bb1.js","sourcesContent":["webpackJsonp([31909741789270],{\n\n/***/ 401:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Nathan Birrell\",\"author\":\"Nathan Birrell\"}},\"markdownRemark\":{\"id\":\"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/reusable-composable-react-components.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>TODO: proper intro</p>\\n<p>Recently been building out a simple expand collapse component with <em>reuse</em>, <em>cusomisation</em> and <em>composition</em> in mind. Shouldn’t be that difficult right?</p>\\n<p>Challenges:</p>\\n<ul>\\n<li><strong>Reusability</strong>: have it manage its own open/close states, hold it’s own core styles and accessibility features. This reduces overhead of implementing the <code class=\\\"language-text\\\">Expandable</code> for users of the component.</li>\\n<li>Allow it to be <strong>customisable</strong> when necessary, so that special implementations stay DRY but not overly limited in how it is styled or how the DOM structure looks.</li>\\n<li><strong>Composable</strong> in the sense that the component, when used, reads like a logical set of subcomponents. For example, a wrapper <code class=\\\"language-text\\\">&lt;Expandable&gt;</code> might have it’s <code class=\\\"language-text\\\">&lt;Expandable.Header&gt;</code> and <code class=\\\"language-text\\\">&lt;Expandable.Content&gt;</code> within it.</li>\\n</ul>\\n<p>Although you could, don’t use <code class=\\\"language-text\\\">React.Context</code> - this is <a href=\\\"https://reactjs.org/docs/context.html#when-to-use-context\\\">not what this API is designed for</a>.</p>\\n<h2>Option #1 Pass individual render props</h2>\\n<p>A very simple approach to this problem would be to pass a few render props to an <code class=\\\"language-text\\\">Expandable</code> component. Passing <code class=\\\"language-text\\\">renderHeader</code> and <code class=\\\"language-text\\\">renderContent</code> as props would work, then let the component handle where and when (i.e. show content when visible is toggled to true) things are displayed.</p>\\n<p>The tradeoff here is that it’s not very customisable. For example, if I want to change where the <em>content</em> renders (i.e. on-top of the Header, not below) I either need to do that for <em>all</em> or create a varation with another prop (which could get messy with too many variations).</p>\\n<h2>Option #2 Higher-Order Component</h2>\\n<p><a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">Higher-Order Components</a> (HOCs) are common patterns in React. Applying them to this context can solve our customisation problem. Essentially, it would allow us to abstract-out our toggle functionality (via <code class=\\\"language-text\\\">withExpandable</code>, <code class=\\\"language-text\\\">isOpen</code> state and other things that <code class=\\\"language-text\\\">Expandable</code> has that custom variations would need.</p>\\n<!-- Pros:\\n - Customisable\\n - DRY\\n\\nCons:\\n - HOCs aren't overly obvious when used\\n - Difficult to enforce consistency -->\\n<p>Implementing the <code class=\\\"language-text\\\">withExpandable</code> HOC is actually fairly straightforward. At its core, it’s a function that takes a component and returns a component <em>with expandable functionality</em> (things like the open state and toggle function).</p>\\n<p>What you don’t get with this take is the consistency that a prop-driven component gets, but you definitely get plenty of customisability. For example, we know in every use case the <code class=\\\"language-text\\\">Header</code> will be a button element, we want this to be built-in and not have to remember to implement this for each usage. To mitigate <em>some</em> of that lacking consistency, I’ve also added imports for a header and content components, wherein transitions, accessibilty, DOM elements and all can be defined in a consistent manner.</p>\\n<p>The other tradeoff to consider here is that HOCs in general aren’t overly obvious when used, depending on where you apply them.</p>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/oyNROL\\\">https://codepen.io/nathanbirrell/pen/oyNROL</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"oyNROL\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: HOC\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/oyNROL/\\\">Expandable: HOC</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">withExpandable</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>PureComponent <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>WrappedComponent\\n        isOpen<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen<span class=\\\"token punctuation\\\">}</span>\\n        toggleOpen<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>WrappedComponent<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> CustomExpandable <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withExpandable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* NOTE: in here you'd likely recycle a few Expandable subcomponents, like Expandable.Header and Expandable.Content */</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h2>Option #3 Render Prop Pattern (or, FACCs)</h2>\\n<p>Also known as Function as Child Component (FACC)</p>\\n<ul>\\n<li>Don’t render <code class=\\\"language-text\\\">children</code> as a function prop (antipattern!)</li>\\n<li>pass <code class=\\\"language-text\\\">render</code> function prop</li>\\n</ul>\\n<p>Expandable contains the reusable functionality/props used by different implementations of it. It takes a render prop as a way of managing the cross-cutting concerns.</p>\\n<p>Pros:</p>\\n<ul>\\n<li>More obvious in render method that Expandable is wrapping this CustomExpandable component</li>\\n<li>Looks more “composable” (than a HOC)</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Edge case with PureComponents to be aware of <a href=\\\"https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent\\\">https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent</a></li>\\n<li>Decreased testability (read <a href=\\\"https://medium.com/@PhilippSpo/i-agree-with-all-of-the-above-and-after-this-pitch-i-am-sold-on-render-prop-components-more-than-9e0e4305a4bf\\\">https://medium.com/@PhilippSpo/i-agree-with-all-of-the-above-and-after-this-pitch-i-am-sold-on-render-prop-components-more-than-9e0e4305a4bf</a>)</li>\\n</ul>\\n<p>Read more:</p>\\n<ul>\\n<li>Render props (React docs) <a href=\\\"https://reactjs.org/docs/render-props.html\\\">https://reactjs.org/docs/render-props.html</a></li>\\n<li>FaCCs as antipattern <a href=\\\"https://americanexpress.io/faccs-are-an-antipattern/\\\">https://americanexpress.io/faccs-are-an-antipattern/</a></li>\\n</ul>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/vrEzWv\\\">https://codepen.io/nathanbirrell/pen/vrEzWv</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"vrEzWv\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: Render Prop\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/vrEzWv/\\\">Expandable: Render Prop</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Expandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomExpandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Expandable\\n        render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>React<span class=\\\"token punctuation\\\">.</span>Fragment<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* NOTE: in here you'd likely recycle a few Expandable subcomponents, like Expandable.Header and Expandable.Content */</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>React<span class=\\\"token punctuation\\\">.</span>Fragment<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>Option #4 Component Injection</h2>\\n<p>In this case, the <code class=\\\"language-text\\\">Expandable</code> component receives Header and Content as <em>component</em> props (known as Component Injection).</p>\\n<p>Pros:</p>\\n<ul>\\n<li>Very obvious in render method that Expandable is wrapping this CustomExpandable component</li>\\n<li>Looks most “composable”</li>\\n<li>Should work very well with component prop types</li>\\n<li>Fairly nice namespacing</li>\\n<li>Enforces structure at the Expandable level, rather than the custom implementation</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Maybe not as customisable? ie: if I want Content to render before Header, I can’t. NOTE: could be mitigated with a renderProp ;)</li>\\n<li>You have to write out separate components for each prop (is this even a con?)</li>\\n</ul>\\n<p>Read more:</p>\\n<ul>\\n<li>Intro to this concept <a href=\\\"https://americanexpress.io/faccs-are-an-antipattern/#component-injection---a-better-solution\\\">https://americanexpress.io/faccs-are-an-antipattern/#component-injection---a-better-solution</a></li>\\n</ul>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/gKbddV\\\">https://codepen.io/nathanbirrell/pen/gKbddV</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"gKbddV\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: Component Injection\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/gKbddV/\\\">Expandable: Component Injection</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Expandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n      Header<span class=\\\"token punctuation\\\">,</span>\\n      Content<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n\\n    <span class=\\\"token keyword\\\">const</span> propsForInjectedComponents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> isOpen<span class=\\\"token punctuation\\\">,</span>\\n      toggleOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// TODO: maybe check for a props.render() here, if it exists, render that instead!</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>propsForInjectedComponents<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Content <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>propsForInjectedComponents<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomExpandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">ExpandableHeader</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Pass isOpen and toggleOpen if needed</span>\\n  <span class=\\\"token function-variable function\\\">ExpandableContent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Expandable\\n        Header<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>ExpandableHeader<span class=\\\"token punctuation\\\">}</span>\\n        Content<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>ExpandableContent<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>TODO: conclude</p>\",\"frontmatter\":{\"title\":\"Building a reusable, customisable and composable React components\",\"date\":\"June 08, 2018\",\"hide\":true}}},\"pathContext\":{\"slug\":\"/notes/reusable-composable-react-components/\",\"previous\":{\"fields\":{\"slug\":\"/notes/typescript-react-defaultprops/\"},\"frontmatter\":{\"title\":\"Use React's defaultProps with Typescript strictNullChecks\"}},\"next\":{\"fields\":{\"slug\":\"/notes/composition-mobx-state-tree/\"},\"frontmatter\":{\"title\":\"Composition in mobx-state-tree\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---notes-reusable-composable-react-components-3c54471de4974bf35bb1.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Nathan Birrell\",\"author\":\"Nathan Birrell\"}},\"markdownRemark\":{\"id\":\"/Users/nathan/dev/nathanbirrell.github.io/src/pages/notes/reusable-composable-react-components.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>TODO: proper intro</p>\\n<p>Recently been building out a simple expand collapse component with <em>reuse</em>, <em>cusomisation</em> and <em>composition</em> in mind. Shouldn’t be that difficult right?</p>\\n<p>Challenges:</p>\\n<ul>\\n<li><strong>Reusability</strong>: have it manage its own open/close states, hold it’s own core styles and accessibility features. This reduces overhead of implementing the <code class=\\\"language-text\\\">Expandable</code> for users of the component.</li>\\n<li>Allow it to be <strong>customisable</strong> when necessary, so that special implementations stay DRY but not overly limited in how it is styled or how the DOM structure looks.</li>\\n<li><strong>Composable</strong> in the sense that the component, when used, reads like a logical set of subcomponents. For example, a wrapper <code class=\\\"language-text\\\">&lt;Expandable&gt;</code> might have it’s <code class=\\\"language-text\\\">&lt;Expandable.Header&gt;</code> and <code class=\\\"language-text\\\">&lt;Expandable.Content&gt;</code> within it.</li>\\n</ul>\\n<p>Although you could, don’t use <code class=\\\"language-text\\\">React.Context</code> - this is <a href=\\\"https://reactjs.org/docs/context.html#when-to-use-context\\\">not what this API is designed for</a>.</p>\\n<h2>Option #1 Pass individual render props</h2>\\n<p>A very simple approach to this problem would be to pass a few render props to an <code class=\\\"language-text\\\">Expandable</code> component. Passing <code class=\\\"language-text\\\">renderHeader</code> and <code class=\\\"language-text\\\">renderContent</code> as props would work, then let the component handle where and when (i.e. show content when visible is toggled to true) things are displayed.</p>\\n<p>The tradeoff here is that it’s not very customisable. For example, if I want to change where the <em>content</em> renders (i.e. on-top of the Header, not below) I either need to do that for <em>all</em> or create a varation with another prop (which could get messy with too many variations).</p>\\n<h2>Option #2 Higher-Order Component</h2>\\n<p><a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">Higher-Order Components</a> (HOCs) are common patterns in React. Applying them to this context can solve our customisation problem. Essentially, it would allow us to abstract-out our toggle functionality (via <code class=\\\"language-text\\\">withExpandable</code>, <code class=\\\"language-text\\\">isOpen</code> state and other things that <code class=\\\"language-text\\\">Expandable</code> has that custom variations would need.</p>\\n<!-- Pros:\\n - Customisable\\n - DRY\\n\\nCons:\\n - HOCs aren't overly obvious when used\\n - Difficult to enforce consistency -->\\n<p>Implementing the <code class=\\\"language-text\\\">withExpandable</code> HOC is actually fairly straightforward. At its core, it’s a function that takes a component and returns a component <em>with expandable functionality</em> (things like the open state and toggle function).</p>\\n<p>What you don’t get with this take is the consistency that a prop-driven component gets, but you definitely get plenty of customisability. For example, we know in every use case the <code class=\\\"language-text\\\">Header</code> will be a button element, we want this to be built-in and not have to remember to implement this for each usage. To mitigate <em>some</em> of that lacking consistency, I’ve also added imports for a header and content components, wherein transitions, accessibilty, DOM elements and all can be defined in a consistent manner.</p>\\n<p>The other tradeoff to consider here is that HOCs in general aren’t overly obvious when used, depending on where you apply them.</p>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/oyNROL\\\">https://codepen.io/nathanbirrell/pen/oyNROL</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"oyNROL\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: HOC\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/oyNROL/\\\">Expandable: HOC</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">withExpandable</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>PureComponent <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>WrappedComponent\\n        isOpen<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen<span class=\\\"token punctuation\\\">}</span>\\n        toggleOpen<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>WrappedComponent<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> CustomExpandable <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withExpandable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* NOTE: in here you'd likely recycle a few Expandable subcomponents, like Expandable.Header and Expandable.Content */</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h2>Option #3 Render Prop Pattern (or, FACCs)</h2>\\n<p>Also known as Function as Child Component (FACC)</p>\\n<ul>\\n<li>Don’t render <code class=\\\"language-text\\\">children</code> as a function prop (antipattern!)</li>\\n<li>pass <code class=\\\"language-text\\\">render</code> function prop</li>\\n</ul>\\n<p>Expandable contains the reusable functionality/props used by different implementations of it. It takes a render prop as a way of managing the cross-cutting concerns.</p>\\n<p>Pros:</p>\\n<ul>\\n<li>More obvious in render method that Expandable is wrapping this CustomExpandable component</li>\\n<li>Looks more “composable” (than a HOC)</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Edge case with PureComponents to be aware of <a href=\\\"https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent\\\">https://reactjs.org/docs/render-props.html#be-careful-when-using-render-props-with-reactpurecomponent</a></li>\\n<li>Decreased testability (read <a href=\\\"https://medium.com/@PhilippSpo/i-agree-with-all-of-the-above-and-after-this-pitch-i-am-sold-on-render-prop-components-more-than-9e0e4305a4bf\\\">https://medium.com/@PhilippSpo/i-agree-with-all-of-the-above-and-after-this-pitch-i-am-sold-on-render-prop-components-more-than-9e0e4305a4bf</a>)</li>\\n</ul>\\n<p>Read more:</p>\\n<ul>\\n<li>Render props (React docs) <a href=\\\"https://reactjs.org/docs/render-props.html\\\">https://reactjs.org/docs/render-props.html</a></li>\\n<li>FaCCs as antipattern <a href=\\\"https://americanexpress.io/faccs-are-an-antipattern/\\\">https://americanexpress.io/faccs-are-an-antipattern/</a></li>\\n</ul>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/vrEzWv\\\">https://codepen.io/nathanbirrell/pen/vrEzWv</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"vrEzWv\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: Render Prop\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/vrEzWv/\\\">Expandable: Render Prop</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Expandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomExpandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Expandable\\n        render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token operator\\\">&lt;</span>React<span class=\\\"token punctuation\\\">.</span>Fragment<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* NOTE: in here you'd likely recycle a few Expandable subcomponents, like Expandable.Header and Expandable.Content */</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>\\n              <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>React<span class=\\\"token punctuation\\\">.</span>Fragment<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>Option #4 Component Injection</h2>\\n<p>In this case, the <code class=\\\"language-text\\\">Expandable</code> component receives Header and Content as <em>component</em> props (known as Component Injection).</p>\\n<p>Pros:</p>\\n<ul>\\n<li>Very obvious in render method that Expandable is wrapping this CustomExpandable component</li>\\n<li>Looks most “composable”</li>\\n<li>Should work very well with component prop types</li>\\n<li>Fairly nice namespacing</li>\\n<li>Enforces structure at the Expandable level, rather than the custom implementation</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Maybe not as customisable? ie: if I want Content to render before Header, I can’t. NOTE: could be mitigated with a renderProp ;)</li>\\n<li>You have to write out separate components for each prop (is this even a con?)</li>\\n</ul>\\n<p>Read more:</p>\\n<ul>\\n<li>Intro to this concept <a href=\\\"https://americanexpress.io/faccs-are-an-antipattern/#component-injection---a-better-solution\\\">https://americanexpress.io/faccs-are-an-antipattern/#component-injection---a-better-solution</a></li>\\n</ul>\\n<p><a href=\\\"https://codepen.io/nathanbirrell/pen/gKbddV\\\">https://codepen.io/nathanbirrell/pen/gKbddV</a></p>\\n<!-- <p data-height=\\\"265\\\" data-theme-id=\\\"dark\\\" data-slug-hash=\\\"gKbddV\\\" data-default-tab=\\\"js,result\\\" data-user=\\\"nathanbirrell\\\" data-embed-version=\\\"2\\\" data-pen-title=\\\"Expandable: Component Injection\\\" class=\\\"codepen\\\">See the Pen <a href=\\\"https://codepen.io/nathanbirrell/pen/gKbddV/\\\">Expandable: Component Injection</a> by Nathan Birrell (<a href=\\\"https://codepen.io/nathanbirrell\\\">@nathanbirrell</a>) on <a href=\\\"https://codepen.io\\\">CodePen</a>.</p>\\n<script async src=\\\"https://static.codepen.io/assets/embed/ei.js\\\"></script> -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Expandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>PureComponent</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">toggleOpen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isOpen <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> isOpen <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>\\n      Header<span class=\\\"token punctuation\\\">,</span>\\n      Content<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n\\n    <span class=\\\"token keyword\\\">const</span> propsForInjectedComponents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      isOpen<span class=\\\"token punctuation\\\">:</span> isOpen<span class=\\\"token punctuation\\\">,</span>\\n      toggleOpen<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// TODO: maybe check for a props.render() here, if it exists, render that instead!</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>toggleOpen<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n          <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>propsForInjectedComponents<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>isOpen <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Content <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>propsForInjectedComponents<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CustomExpandable</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">ExpandableHeader</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span>Click me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\">// Pass isOpen and toggleOpen if needed</span>\\n  <span class=\\\"token function-variable function\\\">ExpandableContent</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>isOpen<span class=\\\"token punctuation\\\">,</span> toggleOpen<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hellooooooooooooooooooooooooooooooooooooooooooooooooooo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>Expandable\\n        Header<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>ExpandableHeader<span class=\\\"token punctuation\\\">}</span>\\n        Content<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>ExpandableContent<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>TODO: conclude</p>\",\"frontmatter\":{\"title\":\"Building a reusable, customisable and composable React components\",\"date\":\"June 08, 2018\",\"hide\":true}}},\"pathContext\":{\"slug\":\"/notes/reusable-composable-react-components/\",\"previous\":{\"fields\":{\"slug\":\"/notes/typescript-react-defaultprops/\"},\"frontmatter\":{\"title\":\"Use React's defaultProps with Typescript strictNullChecks\"}},\"next\":{\"fields\":{\"slug\":\"/notes/composition-mobx-state-tree/\"},\"frontmatter\":{\"title\":\"Composition in mobx-state-tree\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/notes-reusable-composable-react-components.json\n// module id = 401\n// module chunks = 31909741789270"],"sourceRoot":""}